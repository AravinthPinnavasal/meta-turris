diff --git a/wifi_hal.h b/wifi_hal.h
index c69f690..d56c9f3 100644
--- a/wifi_hal.h
+++ b/wifi_hal.h
@@ -668,6 +670,63 @@ typedef struct _wifi_associated_dev3
 } wifi_associated_dev3_t;
 
 /**
+ * _wifi_key_multi_psk structure is a container for multi psk keys.
+ * It is based on hostapd wpa_psk_file implementation
+ * https://w1.fi/cgit/hostap/tree/hostapd/hostapd.wpa_psk
+ */
+typedef struct _wifi_key_multi_psk {
+    CHAR wifi_keyId[64];   //<! Key identifier. for example "key-15" or "key_example"
+    CHAR wifi_psk[64];     //<! PSK is an ASCII passphrase of 8..63 characters
+} wifi_key_multi_psk_t;
+
+/**
+ * @brief This structure holds the information about the wifi interface and adds keyId support.
+ */
+typedef struct _wifi_associated_dev4
+{
+        mac_address_t cli_MACAddress;           /**< The MAC address of an associated device. */
+        CHAR  cli_IPAddress[64];                /**< IP of the associated device  (deprecated, keep it empty) */
+        BOOL  cli_AuthenticationState; /**< Whether an associated device has authenticated (true) or not (false). */
+        UINT  cli_LastDataDownlinkRate; /**< The median PHY rate in Mbps of the most recent 16 unicast data frame transmissions from the access point to the associated device. */
+        UINT  cli_LastDataUplinkRate;   /**< The median PHY rate in Mbps of the most recent 16 unicast data frame transmissions from the associated device to the access point. */
+        INT   cli_SignalStrength;               /**< An indicator of radio signal strength of the uplink from the associated device to the access point, measured in dBm, as an average of the last 100 packets received from the device. */
+        UINT  cli_Retransmissions;      /**< The number of packets that had to be re-transmitted, from the last 100 packets sent to the associated device. Multiple re-transmissions of the same packet count as one. */
+        BOOL  cli_Active;                               /**<      boolean -       Whether or not this node is currently present in the WiFi AccessPoint network. */
+
+        CHAR  cli_OperatingStandard[64];        /**< Radio standard the associated Wi-Fi client device is operating under. Enumeration of: */
+        CHAR  cli_OperatingChannelBandwidth[64];        /**< The operating channel bandwidth of the associated device. The channel bandwidth (applicable to 802.11n and 802.11ac specifications only). Enumeration of: */
+        INT   cli_SNR;          /**< A signal-to-noise ratio (SNR) compares the level of the Wi-Fi signal to the level of background noise. Sources of noise can include microwave ovens, cordless phone, bluetooth devices, wireless video cameras, wireless game controllers, fluorescent lights and more. It is measured in decibels (dB). */
+        CHAR  cli_InterferenceSources[64]; /**< Wi-Fi operates in two frequency ranges (2.4 Ghz and 5 Ghz) which may become crowded other radio products which operate in the same ranges. This parameter reports the probable interference sources that this Wi-Fi access point may be observing. The value of this parameter is a comma seperated list of the following possible sources: eg: MicrowaveOven,CordlessPhone,BluetoothDevices,FluorescentLights,ContinuousWaves,Others */
+        ULONG cli_DataFramesSentAck;    /**< The DataFramesSentAck parameter indicates the total number of MSDU frames marked as duplicates and non duplicates acknowledged. The value of this counter may be reset to zero when the CPE is rebooted. Refer section A.2.3.14 of CableLabs Wi-Fi MGMT Specification. */
+        ULONG cli_DataFramesSentNoAck;  /**< The DataFramesSentNoAck parameter indicates the total number of MSDU frames retransmitted out of the interface (i.e., marked as duplicate and non-duplicate) and not acknowledged, but does not exclude those defined in the DataFramesLost parameter. The value of this counter may be reset to zero when the CPE is rebooted. Refer section A.2.3.14 of CableLabs Wi-Fi MGMT Specification. */
+        ULONG cli_BytesSent;    /**< The total number of bytes transmitted to the client device, including framing characters. */
+        ULONG cli_BytesReceived;        /**< The total number of bytes received from the client device, including framing characters. */
+        INT   cli_RSSI; /**< The Received Signal Strength Indicator, RSSI, parameter is the energy observed at the antenna receiver for transmissions from the device averaged over past 100 packets recevied from the device. */
+        INT   cli_MinRSSI;      /**< The Minimum Received Signal Strength Indicator, RSSI, parameter is the minimum energy observed at the antenna receiver for past transmissions (100 packets). */
+        INT   cli_MaxRSSI;      /**< The Maximum Received Signal Strength Indicator, RSSI, parameter is the energy observed at the antenna receiver for past transmissions (100 packets). */
+        UINT  cli_Disassociations;      /**< This parameter  represents the total number of client disassociations. Reset the parameter evey 24hrs or reboot */
+        UINT  cli_AuthenticationFailures;       /**< This parameter indicates the total number of authentication failures.  Reset the parameter evey 24hrs or reboot */
+
+        ULLONG   cli_Associations;      /**<  Stats handle used to determine reconnects; increases for every association (stat delta calcualtion) */
+
+        ULONG cli_PacketsSent; /**< The total number of packets transmitted to the Associated Device. */
+        ULONG cli_PacketsReceived; /**< The total number of packets received from the Associated Device. */
+        ULONG cli_ErrorsSent; /**< The total number of outbound packets that could not be transmitted because of errors. These might be due to the number of retransmissions exceeding the retry limit, or from other causes. */
+        ULONG cli_RetransCount; /**< The total number of transmitted packets which were retransmissions for each client on the vAP. Two retransmissions of the same packet results in this counter incrementing by two. Three retransmissions of the same packet results in this counter incrementing by three.... */
+        ULONG cli_FailedRetransCount;  /**< The number of packets that were not transmitted successfully due to the number of retransmission attempts exceeding an 802.11 retry limit. */
+        ULONG cli_RetryCount;  /**< The number of packets that were successfully transmitted after one or more retransmissions */
+        ULONG cli_MultipleRetryCount; /**< The number of packets that were successfully transmitted after more than one retransmission. */
+
+       UINT  cli_MaxDownlinkRate; /**< The Max data transmit rate in Mbps for the access point to the associated device. */
+       UINT  cli_MaxUplinkRate;   /**<  The Max data transmit rate in Mbps for the associated device to the access point. */
+       wifi_ul_mu_stats_t  cli_DownlinkMuStats;
+       wifi_dl_mu_stats_t  cli_UplinkMuStats;
+       wifi_twt_params_t	cli_TwtParams;
+       CHAR  cli_MultiPskKeyID[64]; /**< MultiPsk key identifier used in _wifi_key_multi_psk keyId  */
+
+} wifi_associated_dev4_t;
+
+/**
  * @brief RADIUS Server information.
  *
  * Structure which holds the the RADIUS server settings.
@@ -6881,6 +6940,7 @@ INT wifi_getApAssociatedDeviceDiagnosticResult(INT apIndex, wifi_associated_dev_
 
 INT wifi_getApAssociatedDeviceDiagnosticResult2(INT apIndex, wifi_associated_dev2_t **associated_dev_array, UINT *output_array_size); //Tr181	
 INT wifi_getApAssociatedDeviceDiagnosticResult3(INT apIndex, wifi_associated_dev3_t **associated_dev_array, UINT *output_array_size);
+INT wifi_getApAssociatedDeviceDiagnosticResult4(INT apIndex, wifi_associated_dev4_t **associated_dev_array, UINT *output_array_size);
 
 INT wifi_getApAssociatedClientDiagnosticResult(INT apIndex, char *mac_addr, wifi_associated_dev3_t *dev_conn);
 
@@ -6952,6 +7012,84 @@ typedef INT ( * wifi_newApAssociatedDevice_callback)(INT apIndex, wifi_associate
 */
 void wifi_newApAssociatedDevice_callback_register(wifi_newApAssociatedDevice_callback callback_proc);
 
+/* wifi_pushMultiPskKeys() function */
+/**
+* @description Function sets the new set of multi psk keys.
+* Previously set keys are removed.
+* This API is for setting all keys except the primary key.
+* Primary key is set by wifi_setApSecurityKeyPassphrase.
+*
+* @param[in] apIndex - access point index
+* @param[in] keys - Array with all keys that client devices can associate with AP
+* @param[in] keysNumber - Number of elements in 'keys' array
+*
+* @return The status of the operation
+* @retval RETURN_OK if successful
+* @retval RETURN_ERR if any error is detected
+*
+* @sideeffect None
+*/
+INT wifi_pushMultiPskKeys(INT apIndex, wifi_key_multi_psk_t *keys, INT keysNumber);
+
+/* wifi_getMultiPskKeys() function */
+/**
+* @description Function gets all keys from multi psk config.
+* Implementation has to fill all active keys into wifi_key_multi_psk_t array.
+* The keys should be consecutively written starting at [0] element of the keys array.
+* This API is for getting all keys the except primary key.
+* Primary key can be get by wifi_getApSecurityKeyPassphrase.
+*
+* @param[in] apIndex - access point index
+* @param[out] keys - An array to which multi-psk keys active on the AP should be written to. If there are less present keys than 'keysNumber' the unused array elements should contain empty strings (""). Array is allocated by the caller.
+* @param[in] keysNumber - Number of elements in 'keys' array
+*
+* @return The status of the operation
+* @retval RETURN_OK if successful
+* @retval RETURN_ERR if any error is detected
+*
+* @sideeffect None
+*/
+INT wifi_getMultiPskKeys(INT apIndex, wifi_key_multi_psk_t *keys, INT keysNumber);
+
+/* wifi_newApAssociatedDevice_callback2() function */
+/**
+* @brief This callback will be invoked when new wifi client come to associate to Access Point
+*
+* @param[in] apIndex          Access Point Index
+* @param[in] associated_dev   Associated device info
+*
+* @return The status of the operation
+* @retval RETURN_OK if successful
+* @retval RETURN_ERR if any error is detected
+*
+* @execution Synchronous
+* @sideeffect None
+*
+* @note This function must not suspend and must not invoke any blocking system
+* calls. It should probably just send a message to a driver event handler task.
+*
+*/
+typedef INT ( * wifi_newApAssociatedDevice_callback2)(INT apIndex, wifi_associated_dev4_t *associated_dev);
+
+/* wifi_newApAssociatedDevice_callback_register2() function */
+/**
+* @brief Callback registration function.
+*
+* @param[in] callback_proc  wifi_newApAssociatedDevice_callback2 callback function
+*
+* @return The status of the operation
+* @retval RETURN_OK if successful
+* @retval RETURN_ERR if any error is detected
+*
+* @execution Synchronous
+* @sideeffect None
+*
+* @note This function must not suspend and must not invoke any blocking system
+* calls. It should probably just send a message to a driver event handler task.
+*
+*/
+void wifi_newApAssociatedDevice_callback_register2(wifi_newApAssociatedDevice_callback2 callback_proc);
+
 /* wifi_apDisassociatedDevice_callback() function */
 /**
 * @brief This call back will be invoked when new wifi client disassociates from Access Point.	
